# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19PQHXRsWqNudIghpnlKiHeAH06_sBPWj
"""

import streamlit as st
import pandas as pd

st.set_page_config(page_title="Lead Distribution Simulator", layout="wide")

st.title("üîÅ Lead Distribution Simulator")

# Step 1: Configuration Inputs
st.sidebar.header("Simulation Settings")
num_clients = st.sidebar.number_input("Number of Clients", min_value=2, max_value=20, value=3)
num_rounds = st.sidebar.number_input("Number of Rounds", min_value=1, value=5)

st.sidebar.header("Weights (Must sum to 1)")
w_cpl = st.sidebar.slider("CPL Weight", 0.0, 1.0, 0.25)
w_budget = st.sidebar.slider("Budget Utilization Weight", 0.0, 1.0, 0.5)
w_time = round(1.0 - (w_cpl + w_budget), 2)
st.sidebar.text(f"Recency Weight (auto): {w_time}")

# Step 2: Client Setup
st.subheader("üì• Enter Client Details")
client_data = []

for i in range(num_clients):
    with st.expander(f"Client {i+1}", expanded=True):
        cpl = st.number_input(f"Client {i+1} CPL Bid", key=f"cpl_{i}")
        budget = st.number_input(f"Client {i+1} Budget", key=f"budget_{i}")
        time_since_last = st.number_input(f"Client {i+1} Initial Time Since Last Lead (hrs)", key=f"time_{i}")
        client_data.append({
            'Client': f'Client {i+1}',
            'CPL': cpl,
            'Budget': budget,
            'Remaining Budget': budget,
            'Time Since Last Lead': time_since_last
        })

# Run simulation
if st.button("Run Simulation"):
    results = []
    for r in range(1, num_rounds+1):
        df = pd.DataFrame(client_data)
        df["Budget Utilization"] = 1 - (df["Remaining Budget"] / df["Budget"])
        df["norm_CPL"] = (df["CPL"] - df["CPL"].min()) / (df["CPL"].max() - df["CPL"].min() + 1e-6)
        df["norm_Recency"] = (df["Time Since Last Lead"] - df["Time Since Last Lead"].min()) / \
                             (df["Time Since Last Lead"].max() - df["Time Since Last Lead"].min() + 1e-6)
        df["Score"] = (1 - df["norm_CPL"]) * w_cpl + \
                      (1 - df["Budget Utilization"]) * w_budget + \
                      df["norm_Recency"] * w_time

        lead_winner_idx = df["Score"].idxmax()
        lead_winner = df.loc[lead_winner_idx, "Client"]
        df.at[lead_winner_idx, "Remaining Budget"] -= df.loc[lead_winner_idx, "CPL"]

        st.subheader(f"üîÑ Round {r} Result")
        st.dataframe(df[["Client", "CPL", "Remaining Budget", "Time Since Last Lead", "Score"]])

        # Time adjustment input
        st.markdown("### ‚è±Ô∏è Update Time Since Last Lead (in hours)")
        time_inputs = {}
        for i in range(len(df)):
            label = f"{df.loc[i, 'Client']} - {'üîî Got Lead' if i == lead_winner_idx else ''}"
            time_inputs[i] = st.number_input(f"{label}", key=f"round{r}_time_{i}", value=0.0)

        # Update time since last lead
        for i in range(len(df)):
            if i == lead_winner_idx:
                df.at[i, "Time Since Last Lead"] = time_inputs[i]
            else:
                df.at[i, "Time Since Last Lead"] += time_inputs[i]

        # Save round result
        for i in range(len(df)):
            results.append({
                "Round": r,
                "Client": df.loc[i, "Client"],
                "CPL": df.loc[i, "CPL"],
                "Remaining Budget": df.loc[i, "Remaining Budget"],
                "Time Since Last Lead": df.loc[i, "Time Since Last Lead"],
                "Score": df.loc[i, "Score"],
                "Got Lead": "Yes" if i == lead_winner_idx else "No"
            })

        # Update main client_data state
        for i in range(len(client_data)):
            client_data[i]["Remaining Budget"] = df.loc[i, "Remaining Budget"]
            client_data[i]["Time Since Last Lead"] = df.loc[i, "Time Since Last Lead"]

    # Export results
    st.success("‚úÖ Simulation Complete!")
    result_df = pd.DataFrame(results)
    st.dataframe(result_df)

    csv = result_df.to_csv(index=False).encode('utf-8')
    st.download_button("üì• Download Results as CSV", data=csv, file_name="lead_simulation_results.csv", mime="text/csv")


# Save the script to a .py file
# script_path = "/mnt/data/lead_distribution_simulator.py"
# with open(script_path, "w") as f:
#     f.write(script_content)

# script_path

